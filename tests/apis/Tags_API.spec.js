const axios = require('axios');

const endpoint = `http://localhost:3003`;
/** Test block generated by Gadwick */
describe(`Tags API`, function() {
	it(`CRUD for tags`, async function() {
        // C
        const featureArray = await axios.post(`${endpoint}/tags`, { name: "test tag", app_id: "0" })
        const feature = featureArray.data;
        // console.dir(feature)
        // R
        let features = (await axios.get(`${endpoint}/tags/${feature.id}`)).data;
        console.dir(features);
        expect(features.id).toBe(feature.id); // TODO: Deep equal
        // app
        let appFeatures = (await axios.get(`${endpoint}/tags/app/0`)).data;
        // console.dir(features);
        expect(appFeatures.length).toBe(1);

        // // D
        let singleGetResponse;
        await axios.delete(`${endpoint}/tags/${feature.id}`);
        try
        {
            singleGetResponse = await axios.get(`${endpoint}/tags/${feature.id}`);
        }
        catch (err)
        {
            expect(err.response.status).toBe(404, "Specific tag did not return 404 after being deleted.");
            return;
        }
        expect(singleGetResponse.status).toBe(404, "Specific tag did not return 404 after being deleted.");
        let collectionGetResponse;
        try
        {
            collectionGetResponse = await axios.get(`${endpoint}/tags/app/0`);
        }
        catch (err)
        {
            expect(err.response.status).toBe(404, "Tag collection for app did not return 404 after being emptied.");
            return;
        }
        expect(collectionGetResponse.status).toBe(404, "Tag collection for app did not return 404 after being emptied.");
	})
})